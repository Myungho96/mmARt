workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == 'master'

# variables:
#   IMAGE_OPENJDK_GRADLE: gradle:7.6.1-jdk17-alpine
#   IMAGE_OPENJDK: openjdk:17-alpine
# variables:
#   GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.daemon=false"
#   GRADLE_USER_HOME: $CI_PROJECT_DIR/.gradle
#   DOCKER_HOST: tcp://docker:2375/

# image: openjdk:17-alpine
# cache:
#   key: $CI_COMMIT_REF_SLUG
#   paths:
#     - .gradlew/

variables:
  # When using dind service, you must instruct Docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket.
  DOCKER_HOST: tcp://docker:2376
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/services/#accessing-the-services.
  # If you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2376 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376
  #
  # Specify to Docker where to create the certificates. Docker
  # creates them automatically on boot, and creates
  # `/certs/client` to share between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
  # These are usually specified by the entrypoint, however the
  # Kubernetes executor doesn't run entrypoints
  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4125
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

stages:
  - test
  - build
  - deploy

build:
  image: openjdk:17-alpine
  stage: build
  allow_failure: true
  before_script:
    - cd backend/mmart/src/main/resources
    - echo $SPRINGBOOT_PROPS >> "application.properties"
    - cat application.properties
    - ls -al
    - cd ../../../
    - chmod +x gradlew
  script:
    - echo "Compiling the code..."
    - ./gradlew clean build -x test

package:
  image: docker:20.10.16
  services: 
    - docker:20.10.16-dind
  stage: build
  allow_failure: true
  script:
    - docker --version
    - ls -al
    - docker build -t teqteqteqteq/red-limo-backend backend/mmart/

deploy:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  allow_failure: true
  script:
    - kubectl apply -f k8s/deployment.yaml

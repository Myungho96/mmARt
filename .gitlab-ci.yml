workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == 'master'

# variables:
#   IMAGE_OPENJDK_GRADLE: gradle:7.6.1-jdk17-alpine
#   IMAGE_OPENJDK: openjdk:17-alpine

image: gradle:7.6.1-jdk17-alpine

cache:
  key: gradle-dependency
  path: 
    - .gradle/wrapper
    - .gradle/caches

stages:
  - test
  - build
  - package
  - deploy

check:
  cache:
    key: gradle-dependency
    path: 
      - .gradle/wrapper
      - .gradle/caches
  allow_failure: true
  before_script:
    - echo '########## - Define my variables'
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - echo $GRADLE_USER_HOME

    - echo '########## - Check Current Path'
    - pwd
    - ls -a ./

    - echo '########## - Check cached data files'
    - ls -a "$GRADLE_USER_HOME" || true
    - ls -a /cache || true
    - ls -a /cache/caches || true


clean:
  # image: $IMAGE_OPENJDK_GRADLE
  stage: build
  cache:
    key: gradle-dependency
    path: 
      - .gradle/wrapper
      - .gradle/caches
  allow_failure: true
  before_script:
    - cd backend/mmart
    - chmod +x gradlew
  script:
    - echo "Cleaning leftovers from previous builds"
    - ./gradlew clean

build:
  # image: $IMAGE_OPENJDK
  stage: build
  cache:
    key: gradle-dependency
    path: 
      - .gradle/wrapper
      - .gradle/caches
  allow_failure: true
  needs:
    - job: clean
  before_script:
    - cd backend/mmart/src/main/resources
    - echo $SPRINGBOOT_PROPS >> "application.properties"
    - ls -al
    - cd ../../../
    - chmod +x gradlew
  script:
    - echo "Compiling the code..."
    - ./gradlew build -x test
  artifacts:
    name: app.jar
    paths:
      - backend/mmart/build/libs/mmart-0.0.1-SNAPSHOT.jar
    expire_in: 1 week

package:
  stage: package
  cache: []
  allow_failure: true
  before_script:
    - cd backend/mmart
    - docker login -u teqteqteqteq -p $DOCKERHUB_PW
  script:
    - echo "Building Docker Image..."
    - docker build -t teqteqteqteq/red-limo-backend:latest .
  after_script:
    - echo "Publishing Docker Image..."
    - docker push teqteqteqteq/red-limo-backend:latest

kubectl:
  image: bitnami/kubectl:latest
  stage: deploy
  allow_failure: true
  script:
    - echo "check if cluster is connected..."
    - kubectl get all -n gitlab
